// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Evidence {
  id          Int      @id @default(autoincrement())
  marketId    String   // Market identifier (e.g., 'jfk', 'moon')
  type        String   // 'yes' or 'no'
  title       String
  url         String?
  description String
  netVotes     Int      @default(0)
  createdAt   DateTime @default(now())
  walletAddress String
  
  // Relation to individual votes
  votes       Vote[]
  comments    Comment[]
  
  // Index for better query performance
  @@index([marketId])
  @@index([marketId, type])
}

model OddsHistory {
  id            Int      @id @default(autoincrement())
  marketId      String   // Market identifier
  yesProbability Float
  noProbability  Float
  timestamp      DateTime @default(now())
  
  // Index for better query performance
  @@index([marketId])
  @@index([marketId, timestamp])
}

// New model to track individual votes
model Vote {
  id            Int      @id @default(autoincrement())
  evidenceId    Int
  marketId      String   // Market identifier
  walletAddress String
  voteWeight    Int      @default(1) // The weighted value of this vote
  createdAt     DateTime @default(now())
  
  // Relation to evidence
  evidence      Evidence @relation(fields: [evidenceId], references: [id], onDelete: Cascade)
  
  // Composite unique constraint to prevent duplicate votes
  @@unique([evidenceId, walletAddress])
  
  // Indexes for better query performance
  @@index([marketId])
  @@index([walletAddress])
}

// New model to track user market positions for voting weight calculation
model UserMarketPosition {
  id            Int      @id @default(autoincrement())
  marketId      String   // Market identifier
  walletAddress String
  yesShares     Int      @default(0) // Number of Yes shares held
  noShares      Int      @default(0)  // Number of No shares held
  lastUpdated   DateTime @default(now())
  
  // Unique constraint per wallet per market
  @@unique([marketId, walletAddress])
  
  // Indexes for better query performance
  @@index([marketId])
  @@index([walletAddress])
}

// New model for Reddit-style comments on evidence
model Comment {
  id            Int       @id @default(autoincrement())
  evidenceId    Int
  marketId      String    // Market identifier
  parentId      Int?      // For nested replies (null for top-level comments)
  walletAddress String
  content       String
  upvotes       Int       @default(0)
  downvotes     Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  evidence      Evidence  @relation(fields: [evidenceId], references: [id], onDelete: Cascade)
  parent        Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies       Comment[] @relation("CommentReplies")
  votes         CommentVote[]
  
  // Indexes for better query performance
  @@index([evidenceId])
  @@index([marketId])
  @@index([parentId])
  @@index([walletAddress])
}

// New model to track comment votes (upvotes/downvotes)
model CommentVote {
  id            Int       @id @default(autoincrement())
  commentId     Int
  marketId      String    // Market identifier
  walletAddress String
  voteType      String    // 'upvote' or 'downvote'
  createdAt     DateTime  @default(now())
  
  // Relations
  comment       Comment   @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  // Composite unique constraint to prevent duplicate votes per user per comment
  @@unique([commentId, walletAddress])
  
  // Indexes for better query performance
  @@index([commentId])
  @@index([marketId])
  @@index([walletAddress])
}

model Trade {
  id           Int      @id @default(autoincrement())
  walletAddress String  // User's wallet address
  marketTitle   String  // Market title for display
  marketId      String  // Market identifier
  outcome       String  // 'yes' or 'no'
  shares        Float   // Number of shares bought
  avgPrice      Float   // Average price paid per share (in cents)
  betAmount     Float   // Total USD amount spent
  toWin         Float   // Potential payout if outcome wins
  status        String  @default("OPEN") // 'OPEN', 'WON', 'LOST', etc.
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Index for better query performance
  @@index([marketId])
}

model UserPnLHistory {
  id            Int      @id @default(autoincrement())
  walletAddress String
  pnl           Float    // Net profit/loss at this point in time
  timestamp     DateTime @default(now())
  
  @@index([walletAddress])
  @@index([timestamp])
}

// Model for market ideas submitted by users
model MarketIdea {
  id            Int      @id @default(autoincrement())
  title         String
  description   String
  rules         String
  netVotes      Int      @default(0)
  walletAddress String
  status        String   @default("pending") // 'pending', 'approved', 'rejected'
  createdAt     DateTime @default(now())
  
  // Relation to individual votes
  votes         MarketIdeaVote[]
  
  // Indexes for better query performance
  @@index([walletAddress])
  @@index([status])
}

// Model to track votes on market ideas
model MarketIdeaVote {
  id            Int      @id @default(autoincrement())
  ideaId        Int
  walletAddress String
  voteWeight    Int      @default(1) // The weighted value of this vote
  createdAt     DateTime @default(now())
  
  // Relation to market idea
  marketIdea    MarketIdea @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  
  // Composite unique constraint to prevent duplicate votes
  @@unique([ideaId, walletAddress])
  
  // Indexes for better query performance
  @@index([ideaId])
  @@index([walletAddress])
}

// Model to track user deposits for P/L calculations
model UserDeposits {
  id            Int      @id @default(autoincrement())
  walletAddress String
  amount        Float    // Amount deposited in USD
  transactionHash String? // Optional: blockchain transaction hash
  createdAt     DateTime @default(now())
  
  // Indexes for better query performance
  @@index([walletAddress])
  @@index([createdAt])
}
